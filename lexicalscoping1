##makeCacheMatrix is a fuction that creates a special matrix object that can cache
##its inverse for the input(which is invertible square matrix)

makeCacheMatrix <- function(a=matrix())
{invrr <- NULL
set <- function(y){
a <<- y
invrr <<- NULL}
get <- function()a
setinverse <- function(inverse)invrr<<-inverse
getinverse <- function()invrr
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)}

##cacheSolve is a function which computes the inverse of the special matrix returned by above function
##if the inverse has already been calculated(and matrix has not changed,) then cachesolve should retrieve the inverse from cache


cacheSolve <- function(a,...)
{
invrr <- n$getinverse()
if(!is.null(invrr)){
message("gettingcachedata")return(invrr)}
data <- a$get()
invrr <- solve(data)
a$setinverse(invrr)
invrr}
